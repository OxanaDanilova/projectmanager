{"version":3,"file":"static/js/725.669029c6.chunk.js","mappings":"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","sources":["components/BoardItem/BoardItem.tsx","../node_modules/react-jwt/src/jwt/index.ts","components/ModalCreateBoard/ModalCreateBoard.tsx","components/ModalUpdateBoard/ModalUpdateBoard.tsx","components/ModalDeleteBoard/ModalDeleteBoard.tsx","components/pages/BoardList/BoardList.tsx","../node_modules/@mui/icons-material/Edit.js"],"sourcesContent":["import React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport IconButton from '@mui/material/IconButton';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport EditIcon from '@mui/icons-material/Edit';\n\nimport { setShowModalDeleteBoard } from '../../reducers/modalPopupSlice';\nimport { setShowModalUpdateBoard } from '../../reducers/modalPopupSlice';\nimport {\n  setCurrentBoard,\n  setCurrentBoardDescription,\n  setCurrentBoardTitle,\n} from '../../reducers/boardsSlice';\nimport { useAppDispatch } from '../../hook';\nimport { BoardType } from '../../types';\n\nimport './BoardItem.scss';\n\nexport default function BoardItem({ board }: { board: BoardType }) {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const deleteBoard = (boardId: string) => {\n    dispatch(setShowModalDeleteBoard(true));\n    dispatch(setCurrentBoard(boardId));\n  };\n  const updateBoard = (boardId: string) => {\n    dispatch(setShowModalUpdateBoard(true));\n    dispatch(setCurrentBoard(boardId));\n    dispatch(setCurrentBoardTitle(board.title));\n    dispatch(setCurrentBoardDescription(board.description));\n  };\n  return (\n    <div className=\"boardItem\" onClick={() => navigate(`/board/${board._id}`)}>\n      <h3 className=\"boardItem__title\">{board.title}</h3>\n      <p className=\"boardItem__description\">{board.description}</p>\n      <div className=\"boardItem__buttonsWrapper\">\n        <IconButton\n          sx={{ zIndex: '10' }}\n          onClick={event => {\n            event.stopPropagation();\n            deleteBoard(board._id);\n          }}\n        >\n          <DeleteForeverIcon />\n        </IconButton>\n        <IconButton\n          onClick={event => {\n            event.stopPropagation();\n            updateBoard(board._id);\n          }}\n        >\n          <EditIcon />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n","/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken<T>(token: string): T | null;\nexport function decodeToken(token: string): Object | null;\nexport function decodeToken<T = Object>(token: string): T | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // determine the padding characters required for the base64 string\n    const padding: string = \"=\".repeat((4 - (payload.length % 4)) % 4);\n    // convert the base64url string to a base64 string\n    const base64: string =\n      payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    // parse base64 into json\n    const jsonPayload = decodeURIComponent(\n      window.atob(base64)\n          .split('')\n          .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))\n          .join('')\n    );\n    // decode json\n    const decoded = JSON.parse(jsonPayload);\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import React, { FormEvent, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { decodeToken } from 'react-jwt';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\n\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n\nimport { setShowModalCreateBoard } from '../../reducers/modalPopupSlice';\nimport { createBoard } from '../../reducers/boardsSlice';\nimport { useAppDispatch } from '../../hook';\nimport { ModalPopupState, BoardState } from '../../types';\n\ntype FormValues = {\n  boardTitle: string;\n  boardDescription: string;\n};\n\nexport default function ModalCreateBoard({ url }: { url: string }) {\n  const dispatch = useAppDispatch();\n\n  const { showModalCreateBoard } = useSelector(\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\n  );\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<FormValues>();\n\n  const onSubmit = handleSubmit(data => {\n    createBoardRequest(data);\n  });\n\n  const createBoardRequest = (data: FormValues) => {\n    const jwt = localStorage.getItem('jwt');\n    let userId = '';\n    if (jwt) {\n      const myDecodedToken: {\n        id: string;\n        login: string;\n        iat: number;\n        exp: number;\n      } | null = decodeToken(jwt);\n      userId = myDecodedToken ? myDecodedToken.id : '';\n    }\n\n    dispatch(\n      createBoard({\n        url: url,\n        title: data.boardTitle,\n        description: data.boardDescription,\n        owner: userId,\n        users: [userId],\n      }),\n    );\n\n    dispatch(setShowModalCreateBoard(false));\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={showModalCreateBoard}\n        onClose={() => dispatch(setShowModalCreateBoard(false))}\n      >\n        <DialogTitle>\n          <FormattedMessage id='crate_board' />\n        </DialogTitle>\n        <form className=\"createBoard__form\" onSubmit={onSubmit}>\n          <DialogContent sx={{ width: '25rem' }}>\n            <TextField\n              fullWidth\n              sx={{ display: 'block', mb: '1rem' }}\n              id=\"outlined-basic\"\n              label=\"Board title\"\n              variant=\"outlined\"\n              {...register('boardTitle', {\n                required: 'This field is required.',\n                minLength: {\n                  value: 5,\n                  message: 'This field should be more than 5 symbols',\n                },\n              })}\n              helperText={errors.boardTitle && errors.boardTitle.message}\n              error={errors.boardTitle ? true : false}\n            />\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              label=\"Board description\"\n              variant=\"outlined\"\n              {...register('boardDescription')}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button type=\"submit\">\n              <FormattedMessage id='submit' />\n            </Button>\n            <Button onClick={() => dispatch(setShowModalCreateBoard(false))}>\n              <FormattedMessage id='cancel' />\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { decodeToken } from 'react-jwt';\nimport { useForm } from 'react-hook-form';\nimport { FormattedMessage } from 'react-intl';\n\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Button from '@mui/material/Button';\n\nimport { setShowModalUpdateBoard } from '../../reducers/modalPopupSlice';\nimport { updateBoard } from '../../reducers/boardsSlice';\nimport { useAppDispatch } from '../../hook';\nimport { ModalPopupState, BoardState } from '../../types';\n\ntype FormValues = {\n  boardTitle: string;\n  boardDescription: string;\n};\n\nexport default function ModalUpdateBoard({ url }: { url: string }) {\n  const { currentBoardTitle, currentBoardDescription } = useSelector(\n    (state: { boards: BoardState }) => state.boards,\n  );\n\n  const dispatch = useAppDispatch();\n\n  const { showModalUpdateBoard } = useSelector(\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\n  );\n\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm<FormValues>();\n\n  const onSubmit = handleSubmit(data => {\n    updateBoardRequest(data);\n  });\n\n  const updateBoardRequest = (data: FormValues) => {\n    const jwt = localStorage.getItem('jwt');\n    let userId = '';\n    if (jwt) {\n      const myDecodedToken: {\n        id: string;\n        login: string;\n        iat: number;\n        exp: number;\n      } | null = decodeToken(jwt);\n      userId = myDecodedToken ? myDecodedToken.id : '';\n    }\n    dispatch(\n      updateBoard({\n        url: url,\n        title: data.boardTitle,\n        description: data.boardDescription,\n        owner: userId,\n        users: [userId],\n      }),\n    );\n    dispatch(setShowModalUpdateBoard(false));\n  };\n\n  return (\n    <div>\n      <Dialog\n        open={showModalUpdateBoard}\n        onClose={() => dispatch(setShowModalUpdateBoard(false))}\n      >\n        <DialogTitle>\n          <FormattedMessage id=\"update_board\" />\n        </DialogTitle>\n        <form className=\"updateBoard__form\" onSubmit={onSubmit}>\n          <DialogContent sx={{ width: '25rem' }}>\n            <TextField\n              fullWidth\n              sx={{ display: 'block', mb: '1rem' }}\n              id=\"outlined-basic\"\n              label=\"Board title\"\n              variant=\"outlined\"\n              defaultValue={currentBoardTitle}\n              {...register('boardTitle', {\n                required: 'This field is required.',\n                minLength: {\n                  value: 5,\n                  message: 'This field should be more than 5 symbols',\n                },\n              })}\n              helperText={errors.boardTitle && errors.boardTitle.message}\n              error={errors.boardTitle ? true : false}\n            />\n            <TextField\n              fullWidth\n              defaultValue={currentBoardDescription}\n              id=\"outlined-basic\"\n              label=\"Board description\"\n              variant=\"outlined\"\n              {...register('boardDescription')}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button type=\"submit\">\n              <FormattedMessage id=\"confirm\" />\n            </Button>\n            <Button onClick={() => dispatch(setShowModalUpdateBoard(false))}>\n              <FormattedMessage id=\"cancel\" />\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { FormEvent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\n\nimport { setShowModalDeleteBoard } from '../../reducers/modalPopupSlice';\nimport { deleteBoard } from '../../reducers/boardsSlice';\nimport { useAppDispatch } from '../../hook';\nimport { ModalPopupState } from '../../types';\n\nexport default function ModalDeleteBoard({ url }: { url: string }) {\n  const dispatch = useAppDispatch();\n  const { showModalDeleteBoard } = useSelector(\n    (state: { modalPopup: ModalPopupState }) => state.modalPopup,\n  );\n\n  const deleteBoardRequest = (event: FormEvent) => {\n    event.preventDefault();\n    dispatch(deleteBoard(url));\n    dispatch(setShowModalDeleteBoard(false));\n  };\n  return (\n    <div>\n      <Dialog\n        open={showModalDeleteBoard}\n        onClose={() => dispatch(setShowModalDeleteBoard(false))}\n      >\n        <DialogTitle>\n          <FormattedMessage id=\"want_to_delete_board\" />\n        </DialogTitle>\n        <DialogContent>\n          <Box\n            component=\"form\"\n            sx={{\n              '& .MuiTextField-root': { m: 1, width: '25ch' },\n            }}\n            noValidate\n            autoComplete=\"off\"\n          ></Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={(event: FormEvent) => deleteBoardRequest(event)}>\n            <FormattedMessage id='confirm' />\n          </Button>\n          <Button onClick={() => dispatch(setShowModalDeleteBoard(false))}>\n            <FormattedMessage id='cancel' />\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\n\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\n\nimport BoardItem from '../../BoardItem/BoardItem';\nimport ModalCreateBoard from '../../ModalCreateBoard/ModalCreateBoard';\nimport ModalUpdateBoard from '../../ModalUpdateBoard/ModalUpdateBoard';\nimport ModalDeleteBoard from '../../ModalDeleteBoard/ModalDeleteBoard';\nimport { getBoards, setMessage } from '../../../reducers/boardsSlice';\nimport { useAppDispatch } from '../../../hook';\nimport { BoardType, BoardState, ModalPopupState } from '../../../types';\nimport Spinner from '../../Spinner/Spinner';\n\nimport './BoardList.scss';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n  props,\n  ref,\n) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction BoardList() {\n  const dispatch = useAppDispatch();\n\n  const { showModalCreateBoard, showModalDeleteBoard, showModalUpdateBoard } =\n    useSelector((state: { modalPopup: ModalPopupState }) => state.modalPopup);\n\n  const { boardsArr, currentBoardId, isLoading, hasError, message } =\n    useSelector((state: { boards: BoardState }) => state.boards);\n\n  const url = `/boards`;\n\n  useEffect(() => {\n    dispatch(getBoards(url));\n  }, []);\n\n  return (\n    <section className=\"boardList__page\">\n      <div className=\"boardList__header\">\n        <h1 className=\"boardList__title\">\n          <FormattedMessage id=\"boards\" />\n        </h1>\n      </div>\n\n      <section className=\"boardList__boardItems\">\n        {isLoading ? (\n          <Spinner />\n        ) : (\n          boardsArr.map((board: BoardType) => {\n            return <BoardItem key={board._id} board={board} />;\n          })\n        )}\n      </section>\n      {showModalCreateBoard && <ModalCreateBoard url={url} />}\n      {showModalUpdateBoard && (\n        <ModalUpdateBoard url={`${url}/${currentBoardId}`} />\n      )}\n      {showModalDeleteBoard && (\n        <ModalDeleteBoard url={`${url}/${currentBoardId}`} />\n      )}\n      <Snackbar\n        open={message ? true : false}\n        autoHideDuration={5000}\n        onClose={() => dispatch(setMessage(''))}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        key={'bottomright'}\n      >\n        <Alert\n          onClose={() => dispatch(setMessage(''))}\n          severity={hasError ? 'error' : 'success'}\n          sx={{ width: '100%', fontSize: '1rem' }}\n        >\n          {message}\n        </Alert>\n      </Snackbar>\n    </section>\n  );\n}\n\nexport default BoardList;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;"],"names":["BoardItem","board","dispatch","useAppDispatch","navigate","useNavigate","className","onClick","_id","title","description","IconButton","sx","zIndex","event","boardId","stopPropagation","setShowModalDeleteBoard","setCurrentBoard","DeleteForever","setShowModalUpdateBoard","setCurrentBoardTitle","setCurrentBoardDescription","Edit","decodeToken","token","split","length","payload","padding","repeat","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","ModalCreateBoard","url","showModalCreateBoard","useSelector","state","modalPopup","useForm","register","errors","formState","onSubmit","handleSubmit","data","createBoardRequest","jwt","localStorage","getItem","userId","myDecodedToken","id","createBoard","boardTitle","boardDescription","owner","users","setShowModalCreateBoard","Dialog","open","onClose","DialogTitle","DialogContent","width","TextField","fullWidth","display","mb","label","variant","required","minLength","value","message","helperText","DialogActions","Button","type","ModalUpdateBoard","boards","currentBoardTitle","currentBoardDescription","showModalUpdateBoard","updateBoardRequest","updateBoard","defaultValue","ModalDeleteBoard","showModalDeleteBoard","Box","component","m","noValidate","autoComplete","preventDefault","deleteBoard","deleteBoardRequest","Alert","React","props","ref","elevation","boardsArr","currentBoardId","isLoading","hasError","useEffect","getBoards","Spinner","Snackbar","autoHideDuration","setMessage","anchorOrigin","vertical","horizontal","severity","fontSize","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}